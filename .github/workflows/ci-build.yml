name: CI

on:
  push:
    #branches: [ master ]
  pull_request:
    branches: [ master ]
   
jobs:
  Code-Quality-Checks:
    runs-on: ubuntu-latest
    strategy:
      matrix: 
        scripts:
          - run-linter
          - check-docstyle
          - detect-dead-code
          - detect-common-errors
          - measure-maintainability-index 
          - measure-cyclomatic-complexity   
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python 3.6
      uses: actions/setup-python@v2
      with:
        python-version: '3.6'
    - name: Install virtualenv
      run: pip install -U pip && pip install virtualenv
    - name: ${{ matrix.scripts }}
      run: bash qa/${{ matrix.scripts }}.sh;
  Unit-Tests:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python 3.6
      uses: actions/setup-python@v2
      with:
        python-version: '3.6'
    - name: Run Install deps
      run: pip install git+https://github.com/fabric8-analytics/fabric8-analytics-rudra#egg=rudra && pip install -r requirements.txt && pip install pytest pytest-cov radon==2.4.0 codecov raven blinker
    - name: Run Unit
      run: pytest --cov=/recommendation_engine/ --cov-report=xml --cov-fail-under=50 -vv /tests/unit_tests/
    #- name: Run Unit Tests
    #  run: bash qa/runtest.sh
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v1
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: ./coverage.xml
  openshift-yaml-validate:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Install oc
      uses: redhat-actions/oc-installer@v1
      with:
        version: '4.6'
    - name: Run oc process
      run: oc process --local -f openshift/template.yaml -o yaml > blueprint.yaml
    - name: validate openshift yaml
      uses: instrumenta/kubeval-action@master
      with:
          files: blueprint.yaml
  Build-docker-image:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Run Docker Build
      run: docker build --no-cache -t tests-image -f Dockerfile .
